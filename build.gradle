
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'com.google.code.gson:gson:2.8.1'
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'
apply plugin: 'maven'

version = mod_version

group = "org.squiddev"
archivesBaseName = "cc-tweaked-${mc_version}"

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    replace '${version}', mod_version

    mappings = mappings_version
    makeObfSourceJar = false
}

repositories {
    maven {
        name "SquidDev"
        url "https://squiddev.cc/maven"
    }
    ivy {
        name "Charset"
        artifactPattern "https://asie.pl/files/mods/Charset/LibOnly/[module]-[revision](-[classifier]).[ext]"
    }
    maven {
        name "Amadornes"
        url "https://maven.amadornes.com/"
    }
    maven {
        name "CraftTweaker"
        url "https://maven.blamejared.com/"
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {

    deobfProvided "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.554"
    deobfProvided "MCMultiPart2:MCMultiPart:2.5.3"
    deobfProvided "mezz.jei:jei_1.12.2:4.15.0.269:api"
    deobfProvided "pl.asie:Charset-Lib:0.5.4.6"

    runtime "mezz.jei:jei_1.12.2:4.15.0.269"

    shade 'org.squiddev:Cobalt:0.5.1-SNAPSHOT'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'

}

// Compile tasks

javadoc {
    include "dan200/computercraft/api/**/*.java"
}

jar {
    dependsOn javadoc

    manifest {
        attributes('FMLAT': 'computercraft_at.cfg')
    }

    from (sourceSets.main.allSource) {
        include "dan200/computercraft/api/**/*.java"
    }

    from configurations.shade.collect { it.isDirectory() ? it : zipTree(it) }
}

[compileJava, compileTestJava].forEach {
    it.configure {
        options.compilerArgs << "-Xlint" << "-Xlint:-processing" << "-Werror"
    }
}

import java.nio.charset.StandardCharsets
import java.nio.file.*
import java.util.zip.*

processResources {
    inputs.property "version", mod_version
    inputs.property "mcversion", mc_version

    def hash = 'none'
    Set<String> contributors = []
    try {
        def grgit = Grgit.open(dir: '.')
        hash = grgit.head().id

        def blacklist = ['GitHub', 'dan200', 'Daniel Ratcliffe']
        grgit.log().each {
            if (!blacklist.contains(it.author.name)) contributors.add(it.author.name)
            if (!blacklist.contains(it.committer.name)) contributors.add(it.committer.name)
        }
    } catch(Exception ignored) { }

    inputs.property "commithash", hash

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'assets/computercraft/lua/rom/help/credits.txt'

        expand 'version': mod_version,
               'mcversion': mc_version,
               'gitcontributors': contributors.sort(false, String.CASE_INSENSITIVE_ORDER).join('\n')
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'assets/computercraft/lua/rom/help/credits.txt'
    }
}

